---
title: "Vendor-specific AMQP extensions support in amqp gem"
layout: article
disqus_identifier: "amqp_vendor_specific_extensions"
disqus_url: "http://rdoc.info/github/ruby-amqp/amqp/master/file/docs/VendorSpecificExtensions.textile"
permalink: "/broker_specific_extensions/"
---

h2. RabbitMQ extensions

h2. Supported extensions

AMQP gem supports many RabbitMQ extensions to AMQP 0.9.1:

  * "Publisher confirmations":http://www.rabbitmq.com/extensions.html#confirms (confirm.* class)
  * "Negative acknowledgements":http://www.rabbitmq.com/extensions.html#negative-acknowledgements (basic.nack)
  * "Alternate Exchanges":http://www.rabbitmq.com/extensions.html#alternate-exchange
  * "Per-queue Message Time-to-Live":http://www.rabbitmq.com/extensions.html#queue-ttl
  * "Queue Leases":http://www.rabbitmq.com/extensions.html#queue-leases
  * "Sender-selected Distribution":http://www.rabbitmq.com/extensions.html#sender-selected-distribution
  * "Validated user_id":http://www.rabbitmq.com/extensions.html#validated-user-id

h2. Enabling RabbitMQ extensions

If you are using RabbitMQ as AMQP broker and want to use these extensions, simply replace
<pre>require "amqp"</pre>
with
<pre>require "amqp"
require "amqp/extensions/rabbitmq"</pre>

h2. Per-queue Message Time-to-Live

Per-queue Message Time-to-Live (TTL) is a RabbitMQ extension to AMQP 0.9.1 that lets developers control for how longa message published to a queue can live before it is discarded. A message that has been in the queue for longer than theconfigured TTL is said to be dead. Dead messages will not be delivered to consumers and cannot be fetched using*basic.get* operation ({% yard_link AMQP::Queue#pop %}).

Message TTL is specified using *x-message-ttl* argument on declaration. With amqp gem, you pass it to {% yard_link AMQP::Queue#initialize %} or{% yard_link AMQP::Channel#queue %}:

<pre>
# 1000 millisecondschannel.queue("", :arguments => { "x-message-ttl" => 1000 })</code>
</pre>

When a published messages is routed to multiple queues, each of the queues gets a _copy of the message_. If then the message dies inone of the queues, it has no effect on copies of the message in other queues.

h3. Example

The example below sets message TTL for a new server-named queue to be 1000 milliseconds. It then publishes several messages thatare routed to the queue and tries to fetch messages using *basic.get* AMQP method ({% yard_link AMQP::Queue#pop %} after 0.7 and 1.5 seconds:

{% example broker_specific_extensions/per_queue_message_ttl.rb, 1113127 %}

h3. Learn More

See also rabbitmq.com section on "Per-queue Message TTL":http://www.rabbitmq.com/extensions.html#queue-ttl

h2. Publisher Confirms (Publisher Acknowledgements)

In some situations not a single message can be lost. The only reliable way of doing so is using confirmations."Publisher Confirms AMQP extension":http://www.rabbitmq.com/blog/2011/02/10/introducing-publisher-confirms/ was designed to solve the reliable publishing problem.

Publisher confirms are similar to message acknowledgements documented in the "Working With Queues":/articles/working_with_queues/ guide but involve publisher and AMQP brokerinstead of consumer and AMQP broker.

!https://github.com/ruby-amqp/amqp/raw/master/docs/diagrams/006_amqp_091_message_acknowledgements.png!

!https://github.com/ruby-amqp/amqp/raw/master/docs/diagrams/007_rabbitmq_publisher_confirms.png!

h3. Public API

To use publisher confirmations, first put channel into confirmation mode using {% yard_link AMQP::Channel#confirm_select %}:

<pre>channel.confirm_select</pre>

From this moment on, every message published on this channel will cause channel's _publisher index_ (message counter) to be incremented. It is possible to accessusing {% yard_link AMQP::Channel#publisher_index %} method. To check whether channel is in the confirmation mode, use {% yard_link AMQP::Channel#uses_publisher_confirmations? %} predicate.
To handle AMQP broker acknowledgements, define a handler using {% yard_link AMQP::Channel#on_ack %}, for example:

<pre>channel.on_ack do |basic_ack|
 puts "Received basic_ack: multiple = #{basic_ack.multiple}, delivery_tag = #{basic_ack.delivery_tag}"
end</pre>

Delivery tag will indicate number of confirmed messages. If *multiple* attribute is true, the confirmation is for all messages up to the numberdelivery tag indicates. In other words, AMQP broker may confirm just one message or a batch of them.

h3. Example

{% example broker_specific_extensions/rabbitmq_publisher_confirmations_with_amqp_gem_0.8.0.rb, 923599 %}

h3. Learn More

See also rabbitmq.com section on "Confirms aka Publisher Acknowledgements":http://www.rabbitmq.com/extensions.html#confirms

h2. basic.nack

The AMQP specification defines the basic.reject method that allows clients to reject individual, delivered messages, instructing the brokerto either discard them or requeue them. Unfortunately, basic.reject provides no support for negatively acknowledging messages in bulk.

To solve this, RabbitMQ supports the basic.nack method that provides all the functionality of basic.reject whilst alsoallowing for bulk processing of messages.

h3. Public API

When RabbitMQ extensions are loaded, {% yard_link AMQP::Channel#reject %} method is overriden via mixin to take one additional argument: multi (defaults to false).When it is given and is true, amqp gem will use basic.nack AMQP method instead of basic.reject, to reject multiple messages at once.Otherwise, basic.reject is used as usual.

h3. Learn More

See also rabbitmq.com section on "Confirms aka Publisher Acknowledgements":http://www.rabbitmq.com/extensions.html#negative-acknowledgements

h2. Alternate Exchanges

Alternate Exchanges is a RabbitMQ extension to AMQP 0.9.1 that lets developers define "fallback" exchanges where unroutable messages will be sent.

h3. Public API

To specify exchange A as alternate exchange to exchange B, specify 'alternate-exchange' argument on declaration of B:

<pre>exchange1 = channel.fanout("ops.fallback",     :auto_delete => true)
exchange2 = channel.fanout("events.collector", :auto_delete => true, :arguments => { "alternate-exchange" => "ops.fallback" })
</pre>

h3. Example

{% example broker_specific_extensions/using_alternate_exchanges.rb, 1159091 %}

h3. Learn More

See also rabbitmq.com section on "Alternate Exchanges":http://www.rabbitmq.com/extensions.html#alternate-exchange
