---
title: "Running amqp gem test suite"
layout: article
disqus_identifier: "amqp_running_tests_textile"
disqus_url: "http://rdoc.info/github/ruby-amqp/amqp/master/file/docs/RunningTests.textile"
permalink: "/getting_started/"
---

h2. About this guide

This guide is for people who want to contribute to amqp gem development. It has no relevant information for those who want to build applications using the library.

This work is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution 3.0 Unported License</a> (including images & stylesheets). The source is available "on Github":https://github.com/ruby-amqp/amqp/tree/master/docs.


h2. Covered versions

Not applicable.

h2. Canonical repository

Since late 2010, the canonical amqp gem repository is at "github.com/ruby-amqp/amqp":https://github.com/ruby-amqp/amqp and *not tmm1/amqp*.

h2. Initial setup

amqp gem currently uses recent releases of RabbitMQ for automated tests. Broker installation is described in the {file:docs/GettingStarted.textile Getting started} guide and on "rabbitmq.com":http://www.rabbitmq.com/install.html. Once the broker is running, the only other step is to run

@./bin/set_test_suite_realms_up.sh@

that will set up vhosts and users we test authentication and authorization against. Please note that the script uses `rabbitmqctl` tool and in the server environment (for example, a virtual instance in the cloud) depending on your OS and/or distribution of choice, that tool may or may not be accessible to your OS user, so pay attention to that.

h2. Dependencies

Dependencies are managed by Bundler. So begin with

@gem install bundler@

and then, from the root of the repository run

@bundle install@

and you are good to go.


h2. Running spec examples

During development, it is sufficient to just use

@bundle exec rspec -c ./spec@

or replace ./spec with an individual file you want to run.

h2. Continuous integration

CI happens in two steps:

 * Clean up *.rbc files produced by "Rubinius":http://rubini.us.
 * Run the whole test suite

For that, we use Rake:

@rake spec:ci@

Thanks to the excellent "Travis CI":http://travis-ci.org project, we run test suites across multiple Ruby implementations/versions and 2 EventMachine versions.

